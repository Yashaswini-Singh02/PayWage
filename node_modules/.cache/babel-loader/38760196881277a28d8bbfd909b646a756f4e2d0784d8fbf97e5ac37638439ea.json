{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ERC4337EthersProvider = void 0;\nconst providers_1 = require(\"@ethersproject/providers\");\nconst ethers_1 = require(\"ethers\");\nconst utils_1 = require(\"ethers/lib/utils\");\nconst ERC4337EthersSigner_1 = require(\"./ERC4337EthersSigner\");\nconst UserOperationEventListener_1 = require(\"./UserOperationEventListener\");\nconst utils_2 = require(\"@account-abstraction/utils\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = (0, debug_1.default)('aa.provider');\nclass ERC4337EthersProvider extends providers_1.BaseProvider {\n  constructor(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI) {\n    super({\n      name: 'ERC-4337 Custom Network',\n      chainId\n    });\n    this.chainId = chainId;\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.originalProvider = originalProvider;\n    this.httpRpcClient = httpRpcClient;\n    this.entryPoint = entryPoint;\n    this.smartAccountAPI = smartAccountAPI;\n    this.signer = new ERC4337EthersSigner_1.ERC4337EthersSigner(config, originalSigner, this, httpRpcClient, smartAccountAPI);\n  }\n  /**\n   * finish intializing the provider.\n   * MUST be called after construction, before using the provider.\n   */\n  async init() {\n    // await this.httpRpcClient.validateChainId()\n    this.initializedBlockNumber = await this.originalProvider.getBlockNumber();\n    await this.smartAccountAPI.init();\n    // await this.signer.init()\n    return this;\n  }\n  getSigner() {\n    return this.signer;\n  }\n  async perform(method, params) {\n    debug('perform', method, params);\n    if (method === 'sendTransaction' || method === 'getTransactionReceipt') {\n      // TODO: do we need 'perform' method to be available at all?\n      // there is nobody out there to use it for ERC-4337 methods yet, we have nothing to override in fact.\n      throw new Error('Should not get here. Investigate.');\n    }\n    return await this.originalProvider.perform(method, params);\n  }\n  async getTransaction(transactionHash) {\n    // TODO\n    return await super.getTransaction(transactionHash);\n  }\n  async getTransactionReceipt(transactionHash) {\n    const userOpHash = await transactionHash;\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      new UserOperationEventListener_1.UserOperationEventListener(resolve, reject, this.entryPoint, sender, userOpHash).start();\n    });\n  }\n  async getSenderAccountAddress() {\n    return await this.smartAccountAPI.getAccountAddress();\n  }\n  async waitForTransaction(transactionHash, confirmations, timeout) {\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      const listener = new UserOperationEventListener_1.UserOperationEventListener(resolve, reject, this.entryPoint, sender, transactionHash, undefined, timeout);\n      listener.start();\n    });\n  }\n  // fabricate a response in a format usable by ethers users...\n  async constructUserOpTransactionResponse(userOp1) {\n    const userOp = await (0, utils_1.resolveProperties)(userOp1);\n    const userOpHash = (0, utils_2.getUserOpHash)(userOp, this.config.entryPointAddress, this.chainId);\n    const waitPromise = new Promise((resolve, reject) => {\n      new UserOperationEventListener_1.UserOperationEventListener(resolve, reject, this.entryPoint, userOp.sender, userOpHash, userOp.nonce).start();\n    });\n    return {\n      hash: userOpHash,\n      confirmations: 0,\n      from: userOp.sender,\n      nonce: ethers_1.BigNumber.from(userOp.nonce).toNumber(),\n      gasLimit: ethers_1.BigNumber.from(userOp.callGasLimit),\n      value: ethers_1.BigNumber.from(0),\n      data: (0, utils_1.hexValue)(userOp.callData),\n      chainId: this.chainId,\n      wait: async confirmations => {\n        const transactionReceipt = await waitPromise;\n        if (userOp.initCode.length !== 0) {\n          // checking if the wallet has been deployed by the transaction; it must be if we are here\n          await this.smartAccountAPI.checkAccountPhantom();\n        }\n        return transactionReceipt;\n      }\n    };\n  }\n  async detectNetwork() {\n    return this.originalProvider.detectNetwork();\n  }\n}\nexports.ERC4337EthersProvider = ERC4337EthersProvider;","map":{"version":3,"names":["providers_1","require","ethers_1","utils_1","ERC4337EthersSigner_1","UserOperationEventListener_1","utils_2","debug_1","__importDefault","debug","default","ERC4337EthersProvider","BaseProvider","constructor","chainId","config","originalSigner","originalProvider","httpRpcClient","entryPoint","smartAccountAPI","name","signer","ERC4337EthersSigner","init","initializedBlockNumber","getBlockNumber","getSigner","perform","method","params","Error","getTransaction","transactionHash","getTransactionReceipt","userOpHash","sender","getSenderAccountAddress","Promise","resolve","reject","UserOperationEventListener","start","getAccountAddress","waitForTransaction","confirmations","timeout","listener","undefined","constructUserOpTransactionResponse","userOp1","userOp","resolveProperties","getUserOpHash","entryPointAddress","waitPromise","nonce","hash","from","BigNumber","toNumber","gasLimit","callGasLimit","value","data","hexValue","callData","wait","transactionReceipt","initCode","length","checkAccountPhantom","detectNetwork","exports"],"sources":["../../src/ERC4337EthersProvider.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SimpleAccountAPI = void 0;\nconst ethers_1 = require(\"ethers\");\nconst contracts_1 = require(\"@account-abstraction/contracts\");\nconst utils_1 = require(\"ethers/lib/utils\");\nconst BaseAccountAPI_1 = require(\"./BaseAccountAPI\");\n/**\n * An implementation of the BaseAccountAPI using the SimpleAccount contract.\n * - contract deployer gets \"entrypoint\", \"owner\" addresses and \"index\" nonce\n * - owner signs requests using normal \"Ethereum Signed Message\" (ether's signer.signMessage())\n * - nonce method is \"nonce()\"\n * - execute method is \"execFromEntryPoint()\"\n */\nclass SimpleAccountAPI extends BaseAccountAPI_1.BaseAccountAPI {\n  constructor(params) {\n    var _a;\n    super(params);\n    this.factoryAddress = params.factoryAddress;\n    this.owner = params.owner;\n    this.index = (_a = params.index) !== null && _a !== void 0 ? _a : 0;\n  }\n  async _getAccountContract() {\n    if (this.accountContract == null) {\n      this.accountContract = contracts_1.SimpleAccount__factory.connect(await this.getAccountAddress(), this.provider);\n    }\n    return this.accountContract;\n  }\n  /**\n   * return the value to put into the \"initCode\" field, if the account is not yet deployed.\n   * this value holds the \"factory\" address, followed by this account's information\n   */\n  async getAccountInitCode() {\n    if (this.factory == null) {\n      if (this.factoryAddress != null && this.factoryAddress !== '') {\n        this.factory = contracts_1.SimpleAccountFactory__factory.connect(this.factoryAddress, this.provider);\n      } else {\n        throw new Error('no factory to get initCode');\n      }\n    }\n    return (0, utils_1.hexConcat)([this.factory.address, this.factory.interface.encodeFunctionData('createAccount', [await this.owner.getAddress(), this.index])]);\n  }\n  async getNonce() {\n    if (await this.checkAccountPhantom()) {\n      return ethers_1.BigNumber.from(0);\n    }\n    const accountContract = await this._getAccountContract();\n    return await accountContract.nonce();\n  }\n  /**\n   * encode a method call from entryPoint to our contract\n   * @param target\n   * @param value\n   * @param data\n   */\n  async encodeExecute(target, value, data) {\n    const accountContract = await this._getAccountContract();\n    return accountContract.interface.encodeFunctionData('execute', [target, value, data]);\n  }\n  async signUserOpHash(userOpHash) {\n    return await this.owner.signMessage((0, utils_1.arrayify)(userOpHash));\n  }\n}\nexports.SimpleAccountAPI = SimpleAccountAPI;","map":{"version":3,"names":["ethers_1","require","contracts_1","utils_1","BaseAccountAPI_1","SimpleAccountAPI","BaseAccountAPI","constructor","params","factoryAddress","owner","index","_a","_getAccountContract","accountContract","SimpleAccount__factory","connect","getAccountAddress","provider","getAccountInitCode","factory","SimpleAccountFactory__factory","Error","hexConcat","address","interface","encodeFunctionData","getAddress","getNonce","checkAccountPhantom","BigNumber","from","nonce","encodeExecute","target","value","data","signUserOpHash","userOpHash","signMessage","arrayify","exports"],"sources":["../../src/SimpleAccountAPI.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,WAAA,GAAAD,OAAA;AAMA,MAAAE,OAAA,GAAAF,OAAA;AAEA,MAAAG,gBAAA,GAAAH,OAAA;AAeA;;;;;;;AAOA,MAAaI,gBAAiB,SAAQD,gBAAA,CAAAE,cAAc;EAalDC,YAAaC,MAA8B;;IACzC,KAAK,CAACA,MAAM,CAAC;IACb,IAAI,CAACC,cAAc,GAAGD,MAAM,CAACC,cAAc;IAC3C,IAAI,CAACC,KAAK,GAAGF,MAAM,CAACE,KAAK;IACzB,IAAI,CAACC,KAAK,GAAG,CAAAC,EAAA,GAAAJ,MAAM,CAACG,KAAK,cAAAC,EAAA,cAAAA,EAAA,GAAI,CAAC;EAChC;EAEA,MAAMC,mBAAmBA,CAAA;IACvB,IAAI,IAAI,CAACC,eAAe,IAAI,IAAI,EAAE;MAChC,IAAI,CAACA,eAAe,GAAGZ,WAAA,CAAAa,sBAAsB,CAACC,OAAO,CAAC,MAAM,IAAI,CAACC,iBAAiB,EAAE,EAAE,IAAI,CAACC,QAAQ,CAAC;;IAEtG,OAAO,IAAI,CAACJ,eAAe;EAC7B;EAEA;;;;EAIA,MAAMK,kBAAkBA,CAAA;IACtB,IAAI,IAAI,CAACC,OAAO,IAAI,IAAI,EAAE;MACxB,IAAI,IAAI,CAACX,cAAc,IAAI,IAAI,IAAI,IAAI,CAACA,cAAc,KAAK,EAAE,EAAE;QAC7D,IAAI,CAACW,OAAO,GAAGlB,WAAA,CAAAmB,6BAA6B,CAACL,OAAO,CAAC,IAAI,CAACP,cAAc,EAAE,IAAI,CAACS,QAAQ,CAAC;OACzF,MAAM;QACL,MAAM,IAAII,KAAK,CAAC,4BAA4B,CAAC;;;IAGjD,OAAO,IAAAnB,OAAA,CAAAoB,SAAS,EAAC,CACf,IAAI,CAACH,OAAO,CAACI,OAAO,EACpB,IAAI,CAACJ,OAAO,CAACK,SAAS,CAACC,kBAAkB,CAAC,eAAe,EAAE,CAAC,MAAM,IAAI,CAAChB,KAAK,CAACiB,UAAU,EAAE,EAAE,IAAI,CAAChB,KAAK,CAAC,CAAC,CACxG,CAAC;EACJ;EAEA,MAAMiB,QAAQA,CAAA;IACZ,IAAI,MAAM,IAAI,CAACC,mBAAmB,EAAE,EAAE;MACpC,OAAO7B,QAAA,CAAA8B,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;;IAE1B,MAAMjB,eAAe,GAAG,MAAM,IAAI,CAACD,mBAAmB,EAAE;IACxD,OAAO,MAAMC,eAAe,CAACkB,KAAK,EAAE;EACtC;EAEA;;;;;;EAMA,MAAMC,aAAaA,CAAEC,MAAc,EAAEC,KAAmB,EAAEC,IAAY;IACpE,MAAMtB,eAAe,GAAG,MAAM,IAAI,CAACD,mBAAmB,EAAE;IACxD,OAAOC,eAAe,CAACW,SAAS,CAACC,kBAAkB,CACjD,SAAS,EACT,CACEQ,MAAM,EACNC,KAAK,EACLC,IAAI,CACL,CAAC;EACN;EAEA,MAAMC,cAAcA,CAAEC,UAAkB;IACtC,OAAO,MAAM,IAAI,CAAC5B,KAAK,CAAC6B,WAAW,CAAC,IAAApC,OAAA,CAAAqC,QAAQ,EAACF,UAAU,CAAC,CAAC;EAC3D;;AAxEFG,OAAA,CAAApC,gBAAA,GAAAA,gBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calcPreVerificationGas = exports.DefaultGasOverheads = void 0;\nconst utils_1 = require(\"@account-abstraction/utils\");\nconst utils_2 = require(\"ethers/lib/utils\");\nexports.DefaultGasOverheads = {\n  fixed: 21000,\n  perUserOp: 18300,\n  perUserOpWord: 4,\n  zeroByte: 4,\n  nonZeroByte: 16,\n  bundleSize: 1,\n  sigSize: 65\n};\n/**\n * calculate the preVerificationGas of the given UserOperation\n * preVerificationGas (by definition) is the cost overhead that can't be calculated on-chain.\n * it is based on parameters that are defined by the Ethereum protocol for external transactions.\n * @param userOp filled userOp to calculate. The only possible missing fields can be the signature and preVerificationGas itself\n * @param overheads gas overheads to use, to override the default values\n */\nfunction calcPreVerificationGas(userOp, overheads) {\n  const ov = Object.assign(Object.assign({}, exports.DefaultGasOverheads), overheads !== null && overheads !== void 0 ? overheads : {});\n  const p = Object.assign({\n    // dummy values, in case the UserOp is incomplete.\n    preVerificationGas: 21000,\n    signature: (0, utils_2.hexlify)(Buffer.alloc(ov.sigSize, 1))\n  }, userOp);\n  const packed = (0, utils_2.arrayify)((0, utils_1.packUserOp)(p, false));\n  const lengthInWord = (packed.length + 31) / 32;\n  const callDataCost = packed.map(x => x === 0 ? ov.zeroByte : ov.nonZeroByte).reduce((sum, x) => sum + x);\n  const ret = Math.round(callDataCost + ov.fixed / ov.bundleSize + ov.perUserOp + ov.perUserOpWord * lengthInWord);\n  return ret;\n}\nexports.calcPreVerificationGas = calcPreVerificationGas;","map":{"version":3,"names":["utils_1","require","utils_2","exports","DefaultGasOverheads","fixed","perUserOp","perUserOpWord","zeroByte","nonZeroByte","bundleSize","sigSize","calcPreVerificationGas","userOp","overheads","ov","Object","assign","p","preVerificationGas","signature","hexlify","Buffer","alloc","packed","arrayify","packUserOp","lengthInWord","length","callDataCost","map","x","reduce","sum","ret","Math","round"],"sources":["../../src/calcPreVerificationGas.ts"],"sourcesContent":[null],"mappings":";;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AAyCaE,OAAA,CAAAC,mBAAmB,GAAiB;EAC/CC,KAAK,EAAE,KAAK;EACZC,SAAS,EAAE,KAAK;EAChBC,aAAa,EAAE,CAAC;EAChBC,QAAQ,EAAE,CAAC;EACXC,WAAW,EAAE,EAAE;EACfC,UAAU,EAAE,CAAC;EACbC,OAAO,EAAE;CACV;AAED;;;;;;;AAOA,SAAgBC,sBAAsBA,CAAEC,MAAgD,EAAEC,SAAiC;EACzH,MAAMC,EAAE,GAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAQd,OAAA,CAAAC,mBAAmB,GAAMU,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,EAAE,CAAG;EAC3D,MAAMI,CAAC,GAAoCF,MAAA,CAAAC,MAAA;IACzC;IACAE,kBAAkB,EAAE,KAAK;IACzBC,SAAS,EAAE,IAAAlB,OAAA,CAAAmB,OAAO,EAACC,MAAM,CAACC,KAAK,CAACR,EAAE,CAACJ,OAAO,EAAE,CAAC,CAAC;EAAC,GAC5CE,MAAM,CACH;EAER,MAAMW,MAAM,GAAG,IAAAtB,OAAA,CAAAuB,QAAQ,EAAC,IAAAzB,OAAA,CAAA0B,UAAU,EAACR,CAAC,EAAE,KAAK,CAAC,CAAC;EAC7C,MAAMS,YAAY,GAAG,CAACH,MAAM,CAACI,MAAM,GAAG,EAAE,IAAI,EAAE;EAC9C,MAAMC,YAAY,GAAGL,MAAM,CAACM,GAAG,CAACC,CAAC,IAAIA,CAAC,KAAK,CAAC,GAAGhB,EAAE,CAACP,QAAQ,GAAGO,EAAE,CAACN,WAAW,CAAC,CAACuB,MAAM,CAAC,CAACC,GAAG,EAAEF,CAAC,KAAKE,GAAG,GAAGF,CAAC,CAAC;EACxG,MAAMG,GAAG,GAAGC,IAAI,CAACC,KAAK,CACpBP,YAAY,GACZd,EAAE,CAACV,KAAK,GAAGU,EAAE,CAACL,UAAU,GACxBK,EAAE,CAACT,SAAS,GACZS,EAAE,CAACR,aAAa,GAAGoB,YAAY,CAChC;EACD,OAAOO,GAAG;AACZ;AAnBA/B,OAAA,CAAAS,sBAAA,GAAAA,sBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}
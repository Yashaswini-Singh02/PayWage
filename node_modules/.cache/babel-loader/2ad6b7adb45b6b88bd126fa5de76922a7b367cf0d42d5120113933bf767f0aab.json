{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DeterministicDeployer = void 0;\nconst ethers_1 = require(\"ethers\");\nconst utils_1 = require(\"ethers/lib/utils\");\n/**\n * wrapper class for Arachnid's deterministic deployer\n * (deterministic deployer used by 'hardhat-deployer'. generates the same addresses as \"hardhat-deploy\")\n */\nclass DeterministicDeployer {\n  static getAddress(ctrCode) {\n    let salt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return DeterministicDeployer.getDeterministicDeployAddress(ctrCode, salt, params);\n  }\n  static async deploy(ctrCode) {\n    let salt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return await DeterministicDeployer.instance.deterministicDeploy(ctrCode, salt, params);\n  }\n  constructor(provider) {\n    this.provider = provider;\n  }\n  async isContractDeployed(address) {\n    return await this.provider.getCode(address).then(code => code.length > 2);\n  }\n  async isDeployerDeployed() {\n    return await this.isContractDeployed(DeterministicDeployer.proxyAddress);\n  }\n  async deployFactory() {\n    if (await this.isContractDeployed(DeterministicDeployer.proxyAddress)) {\n      return;\n    }\n    const bal = await this.provider.getBalance(DeterministicDeployer.deploymentSignerAddress);\n    const neededBalance = ethers_1.BigNumber.from(DeterministicDeployer.deploymentGasLimit).mul(DeterministicDeployer.deploymentGasPrice);\n    const signer = this.provider.getSigner();\n    if (bal.lt(neededBalance)) {\n      await signer.sendTransaction({\n        to: DeterministicDeployer.deploymentSignerAddress,\n        value: neededBalance,\n        gasLimit: DeterministicDeployer.deploymentGasLimit\n      });\n    }\n    await this.provider.send('eth_sendRawTransaction', [DeterministicDeployer.deploymentTransaction]);\n    if (!(await this.isContractDeployed(DeterministicDeployer.proxyAddress))) {\n      throw new Error('raw TX didn\\'t deploy deployer!');\n    }\n  }\n  async getDeployTransaction(ctrCode) {\n    let salt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    await this.deployFactory();\n    const saltEncoded = (0, utils_1.hexZeroPad)((0, utils_1.hexlify)(salt), 32);\n    const ctrEncoded = DeterministicDeployer.getCtrCode(ctrCode, params);\n    return {\n      to: DeterministicDeployer.proxyAddress,\n      data: (0, utils_1.hexConcat)([saltEncoded, ctrEncoded])\n    };\n  }\n  static getCtrCode(ctrCode, params) {\n    if (typeof ctrCode !== 'string') {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return (0, utils_1.hexlify)(ctrCode.getDeployTransaction(...params).data);\n    } else {\n      if (params.length !== 0) {\n        throw new Error('constructor params can only be passed to ContractFactory');\n      }\n      return ctrCode;\n    }\n  }\n  static getDeterministicDeployAddress(ctrCode) {\n    let salt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    // this method works only before the contract is already deployed:\n    // return await this.provider.call(await this.getDeployTransaction(ctrCode, salt))\n    const saltEncoded = (0, utils_1.hexZeroPad)((0, utils_1.hexlify)(salt), 32);\n    const ctrCode1 = DeterministicDeployer.getCtrCode(ctrCode, params);\n    return '0x' + (0, utils_1.keccak256)((0, utils_1.hexConcat)(['0xff', DeterministicDeployer.proxyAddress, saltEncoded, (0, utils_1.keccak256)(ctrCode1)])).slice(-40);\n  }\n  async deterministicDeploy(ctrCode) {\n    let salt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    const addr = DeterministicDeployer.getDeterministicDeployAddress(ctrCode, salt, params);\n    if (!(await this.isContractDeployed(addr))) {\n      await this.provider.getSigner().sendTransaction(await this.getDeployTransaction(ctrCode, salt, params));\n    }\n    return addr;\n  }\n  static init(provider) {\n    this._instance = new DeterministicDeployer(provider);\n  }\n  static get instance() {\n    if (this._instance == null) {\n      throw new Error('must call \"DeterministicDeployer.init(ethers.provider)\" first');\n    }\n    return this._instance;\n  }\n}\nexports.DeterministicDeployer = DeterministicDeployer;\n// from: https://github.com/Arachnid/deterministic-deployment-proxy\nDeterministicDeployer.proxyAddress = '0x4e59b44847b379578588920ca78fbf26c0b4956c';\nDeterministicDeployer.deploymentTransaction = '0xf8a58085174876e800830186a08080b853604580600e600039806000f350fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf31ba02222222222222222222222222222222222222222222222222222222222222222a02222222222222222222222222222222222222222222222222222222222222222';\nDeterministicDeployer.deploymentSignerAddress = '0x3fab184622dc19b6109349b94811493bf2a45362';\nDeterministicDeployer.deploymentGasPrice = 100e9;\nDeterministicDeployer.deploymentGasLimit = 100000;","map":{"version":3,"names":["ethers_1","require","utils_1","DeterministicDeployer","getAddress","ctrCode","salt","arguments","length","undefined","params","getDeterministicDeployAddress","deploy","instance","deterministicDeploy","constructor","provider","isContractDeployed","address","getCode","then","code","isDeployerDeployed","proxyAddress","deployFactory","bal","getBalance","deploymentSignerAddress","neededBalance","BigNumber","from","deploymentGasLimit","mul","deploymentGasPrice","signer","getSigner","lt","sendTransaction","to","value","gasLimit","send","deploymentTransaction","Error","getDeployTransaction","saltEncoded","hexZeroPad","hexlify","ctrEncoded","getCtrCode","data","hexConcat","ctrCode1","keccak256","slice","addr","init","_instance","exports"],"sources":["../../src/DeterministicDeployer.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}